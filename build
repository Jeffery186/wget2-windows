`configure' configures wget2 2.0.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/wget2]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --disable-largefile     omit support for large files
  --enable-threads={isoc|posix|isoc+posix|windows}
                          specify multithreading API
  --disable-threads       build without multithread safety
  --enable-cross-guesses={conservative|risky}
                          specify policy for cross-compilation guesses
  --disable-rpath         do not hardcode runtime library paths
  --enable-code-coverage  Whether to enable code coverage support
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-manywarnings   Turn on extra compiler warnings (for developers)
  --disable-manylibs      Generate small libraries of libwget functionality
                          groups
  --enable-fuzzing        Turn on fuzzing build (for developers)
  --enable-fsanitize-ubsan
                          Turn on Undefined Behavior Sanitizer (for
                          developers)
  --enable-fsanitize-asan Turn on Address Sanitizer (for developers) (mutually
                          exclusive with Memory/Thread sanitizer or Valgrind
                          tests)
  --enable-fsanitize-msan Turn on Memory Sanitizer (for developers) (mutually
                          exclusive with Address/Thread sanitizer or Valgrind
                          tests)
  --enable-fsanitize-tsan Turn on Thread Sanitizer (for developers) (mutually
                          exclusive with Address/Memory sanitizer or Valgrind
                          tests)
  --enable-assert         Enable assertions in code (for developers)
  --disable-xattr         disable support for POSIX Extended Attributes
  --disable-nls           do not use Native Language Support
  --disable-doc           don t generate any documentation
  --enable-valgrind-tests enable using Valgrind for tests (mutually exclusive
                          with Address/Memory/Thread sanitizer)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-linux-crypto     use Linux kernel cryptographic API (if available)
  --with-openssl          use libcrypto hash routines. Valid ARGs are: 'yes',
                          'no', 'auto' => use if any version available,
                          'auto-gpl-compat' => use if gpl compatible version
                          available, 'optional' => use if available and warn
                          if not available; default is 'no'. Note also
                          --with-linux-crypto, which will enable use of kernel
                          crypto routines, which have precedence
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --without-included-regex
                          don't compile regex; this is the default on systems
                          with recent-enough versions of the GNU C Library
                          (use with caution on other systems).
  --with-gcov=GCOV        use given GCOV for coverage (GCOV=gcov).
  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use
                          both]
  --with-aix-soname=aix|svr4|both
                          shared library versioning (aka "SONAME") variant to
                          provide on AIX, [default=aix].
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot[=DIR]    Search for dependent libraries within DIR (or the
                          compiler's sysroot if not specified).
  --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib
  --without-libintl-prefix     don't search for libintl in includedir and libdir
  --with-ssl              Use SSL/TLS with specified library. Options:
                          'gnutls' (default), 'openssl', 'wolfssl' or 'none'
  --without-libpsl        disable support for libpsl cookie checking
  --without-libhsts       disable support for libhsts checking
  --without-libnghttp2    disable support for libnghttp2
  --without-bzip2         disable bzip2 compression support
  --without-gpgme         support signature verification with gpgme
  --with-gpgme-prefix=PFX prefix where GPGME is installed (optional)
  --without-zlib          disable gzip compression support
  --without-lzma          disable LZMA compression support
  --without-brotlidec     disable Brotli compression support
  --without-zstd          disable Zstandard compression support
  --without-lzip          disable lzip compression support
  --without-libidn2       disable IDN2 support
  --without-libidn        disable IDN support
  --without-libpcre2      disable support for libpcre2
  --without-libpcre       disable support for libpcre
  --without-libmicrohttpd disable support for libmicrohttpd
  --without-plugin-support
                          Disable plugin support

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  LT_SYS_LIBRARY_PATH
              User-defined run-time library search path.
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  GNUTLS_CFLAGS
              C compiler flags for GNUTLS, overriding pkg-config
  GNUTLS_LIBS linker flags for GNUTLS, overriding pkg-config
  OPENSSL_CFLAGS
              C compiler flags for OPENSSL, overriding pkg-config
  OPENSSL_LIBS
              linker flags for OPENSSL, overriding pkg-config
  WOLFSSL_CFLAGS
              C compiler flags for WOLFSSL, overriding pkg-config
  WOLFSSL_LIBS
              linker flags for WOLFSSL, overriding pkg-config
  NETTLE_CFLAGS
              C compiler flags for NETTLE, overriding pkg-config
  NETTLE_LIBS linker flags for NETTLE, overriding pkg-config
  LIBPSL_CFLAGS
              C compiler flags for LIBPSL, overriding pkg-config
  LIBPSL_LIBS linker flags for LIBPSL, overriding pkg-config
  LIBHSTS_CFLAGS
              C compiler flags for LIBHSTS, overriding pkg-config
  LIBHSTS_LIBS
              linker flags for LIBHSTS, overriding pkg-config
  LIBNGHTTP2_CFLAGS
              C compiler flags for LIBNGHTTP2, overriding pkg-config
  LIBNGHTTP2_LIBS
              linker flags for LIBNGHTTP2, overriding pkg-config
  GPGME_CFLAGS
              C compiler flags for GPGME, overriding pkg-config
  GPGME_LIBS  linker flags for GPGME, overriding pkg-config
  ZLIB_CFLAGS C compiler flags for ZLIB, overriding pkg-config
  ZLIB_LIBS   linker flags for ZLIB, overriding pkg-config
  LZMA_CFLAGS C compiler flags for LZMA, overriding pkg-config
  LZMA_LIBS   linker flags for LZMA, overriding pkg-config
  BROTLIDEC_CFLAGS
              C compiler flags for BROTLIDEC, overriding pkg-config
  BROTLIDEC_LIBS
              linker flags for BROTLIDEC, overriding pkg-config
  ZSTD_CFLAGS C compiler flags for ZSTD, overriding pkg-config
  ZSTD_LIBS   linker flags for ZSTD, overriding pkg-config
  LZIP_CFLAGS C compiler flags for LZIP, overriding pkg-config
  LZIP_LIBS   linker flags for LZIP, overriding pkg-config
  LIBIDN2_CFLAGS
              C compiler flags for LIBIDN2, overriding pkg-config
  LIBIDN2_LIBS
              linker flags for LIBIDN2, overriding pkg-config
  LIBIDN_CFLAGS
              C compiler flags for LIBIDN, overriding pkg-config
  LIBIDN_LIBS linker flags for LIBIDN, overriding pkg-config
  LIBPCRE2_CFLAGS
              C compiler flags for LIBPCRE2, overriding pkg-config
  LIBPCRE2_LIBS
              linker flags for LIBPCRE2, overriding pkg-config
  LIBPCRE_CFLAGS
              C compiler flags for LIBPCRE, overriding pkg-config
  LIBPCRE_LIBS
              linker flags for LIBPCRE, overriding pkg-config
  MICROHTTPD_CFLAGS
              C compiler flags for MICROHTTPD, overriding pkg-config
  MICROHTTPD_LIBS
              linker flags for MICROHTTPD, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <bug-wget@gnu.org>.
wget2 home page: <https://savannah.gnu.org/projects/wget>.