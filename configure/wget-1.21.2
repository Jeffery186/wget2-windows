`configure' configures wget 1.21.2 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/wget]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-fuzzing        Turn on fuzzing build (for developers)
  --enable-fsanitize-ubsan
                          Turn on Undefined Behavior Sanitizer (for
                          developers)
  --enable-fsanitize-asan Turn on Address Sanitizer (for developers) (mutually
                          exclusive with Memory/Thread sanitizer or Valgrind
                          tests)
  --enable-fsanitize-msan Turn on Memory Sanitizer (for developers) (mutually
                          exclusive with Address/Thread sanitizer or Valgrind
                          tests)
  --disable-opie          disable support for opie or s/key FTP login
  --disable-digest        disable support for HTTP digest authorization
  --disable-ntlm          disable support for NTLM authorization
  --disable-debug         disable support for debugging output
  --enable-valgrind-tests enable using Valgrind for tests
  --enable-assert         enable assertions in code base
  --disable-largefile     omit support for large files
  --disable-year2038      omit support for timestamps past the year 2038
  --enable-threads={isoc|posix|isoc+posix|windows}
                          specify multithreading API
  --disable-threads       build without multithread safety
  --disable-nls           do not use Native Language Support
  --disable-rpath         do not hardcode runtime library paths
  --enable-cross-guesses={conservative|risky}
                          specify policy for cross-compilation guesses
  --enable-code-coverage  Whether to enable code coverage support
  --enable-manywarnings   Turn on extra compiler warnings (for developers)
  --disable-ipv6          disable IPv6 support
  --disable-iri           disable IDN/IRIs support
  --disable-pcre2         Disable PCRE2 style regular expressions
  --disable-pcre          Disable PCRE style regular expressions
  --disable-xattr         disable support for POSIX Extended Attributes

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --without-libpsl        disable support for libpsl cookie checking.
  --with-ssl={gnutls,openssl,no}
                          specify SSL backend. GNU TLS is the default.
  --without-zlib          disable zlib.
  --with-metalink         enable support for metalinks.
  --with-cares            enable support for C-Ares DNS lookup.
  --with-python_prefix    override the default PYTHON_PREFIX
  --with-python_exec_prefix
                          override the default PYTHON_EXEC_PREFIX
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib
  --without-libintl-prefix     don't search for libintl in includedir and libdir
  --with-linux-crypto     use Linux kernel cryptographic API (if available)
  --with-openssl          use libcrypto hash routines. Valid ARGs are: 'yes',
                          'no', 'auto' => use if any version available,
                          'auto-gpl-compat' => use if gpl compatible version
                          available, 'optional' => use if available and warn
                          if not available; default is 'no'. Note also
                          --with-linux-crypto, which will enable use of kernel
                          crypto routines, which have precedence
  --with-included-libunistring  use the libunistring parts included here
  --with-libunistring-prefix[=DIR]  search for libunistring in DIR/include and DIR/lib
  --without-libunistring-prefix     don't search for libunistring in includedir and libdir
  --without-included-regex
                          don't compile regex; this is the default on systems
                          with recent-enough versions of the GNU C Library
                          (use with caution on other systems).
  --with-gcov=GCOV        use given GCOV for coverage (GCOV=gcov).
  --with-libssl-prefix[=DIR]  search for libssl in DIR/include and DIR/lib
  --without-libssl-prefix     don't search for libssl in includedir and libdir
  --with-libgnutls-prefix[=DIR]  search for libgnutls in DIR/include and DIR/lib
  --without-libgnutls-prefix     don't search for libgnutls in includedir and libdir
  --with-libidn=DIR       Support IDN2008/IRIs (needs GNU libidn2 +
                          libunicode)
  --without-libuuid       Generate UUIDs for WARC files via libuuid
  --with-gpgme-prefix=PFX prefix where GPGME is installed (optional)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  PYTHON      the Python interpreter
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  LIBPSL_CFLAGS
              C compiler flags for LIBPSL, overriding pkg-config
  LIBPSL_LIBS linker flags for LIBPSL, overriding pkg-config
  ZLIB_CFLAGS C compiler flags for ZLIB, overriding pkg-config
  ZLIB_LIBS   linker flags for ZLIB, overriding pkg-config
  OPENSSL_CFLAGS
              C compiler flags for OPENSSL, overriding pkg-config
  OPENSSL_LIBS
              linker flags for OPENSSL, overriding pkg-config
  GNUTLS_CFLAGS
              C compiler flags for GNUTLS, overriding pkg-config
  GNUTLS_LIBS linker flags for GNUTLS, overriding pkg-config
  UUID_CFLAGS C compiler flags for UUID, overriding pkg-config
  UUID_LIBS   linker flags for UUID, overriding pkg-config
  PCRE2_CFLAGS
              C compiler flags for PCRE2, overriding pkg-config
  PCRE2_LIBS  linker flags for PCRE2, overriding pkg-config
  PCRE_CFLAGS C compiler flags for PCRE, overriding pkg-config
  PCRE_LIBS   linker flags for PCRE, overriding pkg-config
  CARES_CFLAGS
              C compiler flags for CARES, overriding pkg-config
  CARES_LIBS  linker flags for CARES, overriding pkg-config
  METALINK_CFLAGS
              C compiler flags for METALINK, overriding pkg-config
  METALINK_LIBS
              linker flags for METALINK, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <bug-wget@gnu.org>.